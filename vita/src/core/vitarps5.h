#ifndef VITARPS5_CORE_H
#define VITARPS5_CORE_H

#ifdef __cplusplus
extern "C" {
#endif

#include <psp2/ctrl.h>
#include <stdbool.h>
#include <stdint.h>

// Auto-generated version information (generated by build system)
#include "version.h"

// Protocol constants (based on Chiaki/Takion research)
#define VITARPS5_PORT_CONTROL 9295
#define VITARPS5_PORT_STREAM 9296
#define VITARPS5_PORT_WAKE_PS5 9302
#define VITARPS5_MTU_SIZE 1500
#define VITARPS5_MAX_PAYLOAD 1200

// Global timeout configuration
#define VITARPS5_TIMEOUT_SECONDS 60  // Master timeout for all PS5 operations

// Error codes
typedef enum {
  VITARPS5_SUCCESS = 0,
  VITARPS5_ERROR_INIT = -1,
  VITARPS5_ERROR_NETWORK = -2,
  VITARPS5_ERROR_VIDEO = -3,
  VITARPS5_ERROR_AUDIO = -4,
  VITARPS5_ERROR_INPUT = -5,
  VITARPS5_ERROR_MEMORY = -6,
  VITARPS5_ERROR_CRYPTO = -7,
  VITARPS5_ERROR_PROTOCOL = -8,
  VITARPS5_ERROR_INVALID_PARAM = -9,
  VITARPS5_ERROR_NOT_CONNECTED = -10,
  VITARPS5_ERROR_TIMEOUT = -11,
  VITARPS5_ERROR_HARDWARE = -12,
  VITARPS5_ERROR_INVALID_STATE = -13,
  VITARPS5_ERROR_NOT_INITIALIZED = -14,
  VITARPS5_ERROR_FILE_NOT_FOUND = -15,
  VITARPS5_ERROR_FILE_IO = -16,
  VITARPS5_ERROR_IO = -16,  // Alias for FILE_IO
  VITARPS5_ERROR_PARSE_FAILED = -17,
  VITARPS5_ERROR_NOT_FOUND = -18,
  VITARPS5_ERROR_CONSOLE_EXISTS = -19,
  VITARPS5_ERROR_CONSOLE_NOT_FOUND = -20,
  VITARPS5_ERROR_CACHE_FULL = -21,
  VITARPS5_ERROR_BUFFER_TOO_SMALL = -22,
  VITARPS5_ERROR_INVALID_DATA = -23,
  VITARPS5_ERROR_SYSTEM_CALL = -24,
  VITARPS5_ERROR_EXPIRED = -25,
  VITARPS5_ERROR_NO_DATA = -26,
  VITARPS5_ERROR_NOT_IMPLEMENTED = -27,
  VITARPS5_ERROR_OFFLINE = -28,
  VITARPS5_ERROR_NOT_AUTHENTICATED = -29,
  VITARPS5_ERROR_AUTH_FAILED = -30,          // Authentication failed
  VITARPS5_ERROR_INVALID_CREDENTIALS = -31,  // Invalid or missing credentials
  VITARPS5_ERROR_ALREADY_EXISTS = -32,
  VITARPS5_ERROR_MAX_LIMIT = -33,
  VITARPS5_ERROR_CORRUPTED = -34,
  VITARPS5_ERROR_THREAD_CREATE = -35,      // Thread creation failed
  VITARPS5_ERROR_THREAD_START = -36,       // Thread start failed
  VITARPS5_ERROR_MUTEX_CREATE = -37,       // Mutex creation failed
  VITARPS5_ERROR_COND_CREATE = -38,        // Condition variable creation failed
  VITARPS5_ERROR_THREAD = -39,             // General thread error
  VITARPS5_ERROR_CANCELLED = -40,          // Operation cancelled
  VITARPS5_ERROR_INCOMPATIBLE = -41,       // Version incompatible
  VITARPS5_ERROR_CONSOLE_SLEEPING = -42,   // Console is in rest/standby mode
  VITARPS5_ERROR_NOT_REGISTERED = -43,     // Console not registered
  VITARPS5_ERROR_CORRUPTED_DATA = -44,     // Data corruption detected
  VITARPS5_ERROR_VALIDATION_FAILED = -45,  // Validation failed
  VITARPS5_ERROR_CONNECTION_REFUSED = -46,  // TCP connection refused (RST)
  VITARPS5_ERROR_UNKNOWN = -100
} VitaRPS5Result;

// Connection states (based on Takion protocol)
typedef enum {
  VITARPS5_STATE_IDLE = 0,
  VITARPS5_STATE_TAKION_CONNECT,     // Initial handshake
  VITARPS5_STATE_EXPECT_BANG,        // Protocol negotiation
  VITARPS5_STATE_EXPECT_STREAMINFO,  // Stream parameters
  VITARPS5_STATE_STREAMING,          // Active session
  VITARPS5_STATE_DISCONNECTING,
  VITARPS5_STATE_ERROR
} VitaRPS5State;

// Console types
typedef enum {
  VITARPS5_CONSOLE_PS4 = 4,
  VITARPS5_CONSOLE_PS5 = 5
} VitaRPS5ConsoleType;

// Video quality presets (optimized for PS Vita)
typedef enum {
  VITARPS5_QUALITY_PERFORMANCE = 0,  // 720p@30fps, 5Mbps (recommended)
  VITARPS5_QUALITY_BALANCED = 1,     // 720p@60fps, 10Mbps
  VITARPS5_QUALITY_QUALITY = 2,  // 720p@60fps, 15Mbps (requires stable network)
  VITARPS5_QUALITY_CUSTOM = 3
} VitaRPS5Quality;

// Connection configuration
typedef struct {
  // Network settings
  char ps_address[64];               // PlayStation console IP
  uint16_t control_port;             // Control port (9295)
  uint16_t stream_port;              // Stream port (9296)
  VitaRPS5ConsoleType console_type;  // PS4 or PS5

  // Video settings
  VitaRPS5Quality quality;  // Quality preset
  bool hardware_decode;     // Use hardware H.264 decoder
  uint32_t target_bitrate;  // Bitrate in kbps
  uint32_t target_fps;      // 30 or 60 fps
  uint32_t width;           // Video width (720)
  uint32_t height;          // Video height (480/576)

  // Audio settings
  bool audio_enabled;          // Enable audio streaming
  uint32_t audio_sample_rate;  // 48000 Hz

  // Video enhancement settings
  bool hdr_enabled;    // HDR support
  bool vsync_enabled;  // V-Sync

  // Network settings
  bool auto_connect;  // Auto-connect to last console
  bool wake_on_lan;   // Wake console via LAN
  uint32_t mtu_size;  // Network MTU size

  // Input settings
  bool motion_enabled;        // Enable motion controls
  bool rear_touch_enabled;    // Use rear touchpad
  float deadzone_percent;     // Controller deadzone (0.0-50.0)
  float sensitivity_percent;  // Controller sensitivity (50.0-150.0)

  // Performance settings
  uint32_t video_buffer_count;   // Number of video buffers (3-5)
  uint32_t network_buffer_size;  // Network buffer size (64KB)
  uint32_t max_decode_threads;   // Max decoder threads (1-2)
} VitaRPS5Config;

// Performance statistics
typedef struct {
  // Latency metrics (milliseconds)
  float input_latency;   // Input to display latency
  float network_rtt;     // Network round-trip time
  float decode_latency;  // Video decode time
  float render_latency;  // Render time

  // Throughput metrics
  float video_bitrate_kbps;     // Current video bitrate
  float audio_bitrate_kbps;     // Current audio bitrate
  float current_fps;            // Actual FPS
  uint32_t packets_per_second;  // Network packets/sec

  // Quality metrics
  uint32_t frames_received;        // Total video frames received
  uint32_t audio_frames_received;  // Total audio frames received
  uint32_t frames_dropped;         // Dropped video frames
  uint32_t packets_lost;           // Lost network packets
  float packet_loss_rate;          // Packet loss percentage

  // Resource usage
  float cpu_usage_percent;        // CPU usage
  uint32_t memory_usage_mb;       // Memory usage
  uint32_t session_duration_sec;  // Session uptime

  // Hardware decoder stats
  bool hw_decoder_active;     // Hardware decoder in use
  uint32_t hw_decode_errors;  // Hardware decode failures
} VitaRPS5Stats;

// Forward declarations
typedef struct VitaRPS5Session VitaRPS5Session;

// Event callbacks
typedef void (*VitaRPS5StateCallback)(VitaRPS5State state, void* user_data);
typedef void (*VitaRPS5ErrorCallback)(VitaRPS5Result error, const char* message,
                                      void* user_data);

// Core API functions

/**
 * Initialize VitaRPS5 library
 */
VitaRPS5Result vitarps5_init(void);

/**
 * Cleanup VitaRPS5 library
 */
void vitarps5_cleanup(void);

/**
 * Create a new session with the specified configuration
 */
VitaRPS5Result vitarps5_session_create(const VitaRPS5Config* config,
                                       VitaRPS5Session** session);

/**
 * Destroy a session
 */
void vitarps5_session_destroy(VitaRPS5Session* session);

// Connection management

/**
 * Connect to PlayStation console
 */
VitaRPS5Result vitarps5_connect(VitaRPS5Session* session);

/**
 * Disconnect from PlayStation console
 */
VitaRPS5Result vitarps5_disconnect(VitaRPS5Session* session);

/**
 * Update session (call every frame)
 */
VitaRPS5Result vitarps5_update(VitaRPS5Session* session);

/**
 * Send controller input
 */
VitaRPS5Result vitarps5_send_input(VitaRPS5Session* session,
                                   const SceCtrlData* pad);

// Status and statistics

/**
 * Get current session state
 */
VitaRPS5State vitarps5_get_state(const VitaRPS5Session* session);

/**
 * Get performance statistics
 */
VitaRPS5Result vitarps5_get_stats(const VitaRPS5Session* session,
                                  VitaRPS5Stats* stats);

// Configuration

/**
 * Get default configuration
 */
void vitarps5_config_default(VitaRPS5Config* config);

/**
 * Set quality preset
 */
VitaRPS5Result vitarps5_set_quality(VitaRPS5Session* session,
                                    VitaRPS5Quality quality);

// Callbacks

/**
 * Set state change callback
 */
void vitarps5_set_state_callback(VitaRPS5Session* session,
                                 VitaRPS5StateCallback callback,
                                 void* user_data);

/**
 * Set error callback
 */
void vitarps5_set_error_callback(VitaRPS5Session* session,
                                 VitaRPS5ErrorCallback callback,
                                 void* user_data);

// Utility functions

/**
 * Convert result code to string
 */
const char* vitarps5_result_string(VitaRPS5Result result);

/**
 * Convert state to string
 */
const char* vitarps5_state_string(VitaRPS5State state);

/**
 * Get library version
 */
const char* vitarps5_get_version(void);

#ifdef __cplusplus
}
#endif

#endif  // VITARPS5_CORE_H